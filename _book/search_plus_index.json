{"./":{"url":"./","title":"前言","keywords":"","body":"Docker学习笔记 Copyright © Aron.Li 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-07-02 12:47:09 "},"Chapter1/容器生态系统.html":{"url":"Chapter1/容器生态系统.html","title":"容器生态系统","keywords":"","body":"容器生态系统 Copyright © Aron.Li 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-07-02 12:28:44 "},"Chapter1/容器核心技术.html":{"url":"Chapter1/容器核心技术.html","title":"第1节：容器核心技术","keywords":"","body":"TreeviewCopyright © aleen42 all right reserved, powered by aleen42 1.容器规范 2.容器runtime 3.容器管理工具（我们常说的docker） 4.容器定义工具 5.Registry 6.容器OS 1.容器规范 ​ OCI发布了两个规范：runtime spec和image format spec ​ 保证容器的可移植性和互操作性 2.容器runtime ​ 容器真正运行的地方，为容器提供运行环境，类似java的JVM ​ lxc、runc、rkt是目前主流的三种runtime 3.容器管理工具（我们常说的docker） ​ 管理容器，对内与runtime交互，对外为用户提供接口 ​ runc管理工具是docker engine(包含deamon和cli) 4.容器定义工具 ​ 允许用户定义容器的内容和属性，这样容器就能够被保存、共享和重建 ​ dockerfile包含若干命令的文本文件，通过该命令创建出docker image ​ docker image是Docker容器的模板，runtime依据docker image创建容器 ​ ACI（App Container Image）与docker image类似，它是由CoreOS开发的rkt容器的image格式 5.Registry ​ 容器通过Image创建，需要Registry仓库来统一存放image ​ 企业通过Docker Registry构建私有的Registry ​ Docker Hub（https://hub.docker.com）是Docker为公众提供的托管的Registry，有很多现成的image ​ Quay.io（https://quay.io/）是另一个公共托管Registry 6.容器OS ​ 容器OS是专门运行容器的操作系统。 Copyright © Aron.Li 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-07-02 12:46:27 "},"Chapter1/容器平台技术.html":{"url":"Chapter1/容器平台技术.html","title":"第2节：容器平台技术","keywords":"","body":"TreeviewCopyright © aleen42 all right reserved, powered by aleen42 1.容器编排引擎 2.容器管理平台 3.基于容器的PaaS 容器核心技术使容器能够在单个Host上运行，而容器平台技术能够让容器作为集群在分布式环境中运行 平台技术包括容器编排引擎、容器管理平台和基于容器的PaaS 1.容器编排引擎 基于微服务架构的应用系统实际上是一个动态的可伸缩的系统，我们需要一种高效的方法管理容器集群，即容器编排的目的。 编排：通常包括容器管理、调度、集群定义和服务发现。通过容器编排引擎，容器被有机组合成微服务应用，实现业务需求。 主流的容器编排引擎： docker swarm是Docker开发的容器编排引擎。 kubernetes是谷歌开发的，同时支持Docker和CoreOS容器。 mesos是一个通用的集群资源调度平台，mesos与marathon一起提供容器编排引擎功能。 2.容器管理平台 架构在容器编排引擎之上的更为通用的平台，通常能支持多种编排引擎，抽象了编排引擎的底层实现细节，为用户提供更方便的功能。如一键部署 Rancher和ContainerShip是代表。 3.基于容器的PaaS 为微服务应用开发人员和公司提供了开发、部署和管理应用的平台，使用户不必关心底层基础设施而专注应用开发 Deis、Flynn和Dokku都是开源容器PaaS的代表 Copyright © Aron.Li 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-07-02 11:02:16 "},"Chapter1/容器支持技术.html":{"url":"Chapter1/容器支持技术.html","title":"第3节：容器支持技术","keywords":"","body":"TreeviewCopyright © aleen42 all right reserved, powered by aleen42 1.容器网络 2.服务发现 3.监控 4.数据管理 5.日志管理 6.安全性 下列技术被用于支持基于容器的基础设施 1.容器网络 容器的出现使网络拓扑变的更动态和复杂。用户需要专门的解决方案和管理容器与容器、容器与其他实体之间的连通性和隔离性。 docker network是Docker原生的网络解决方案。 2.服务发现 动态变化是微服务应用的一大特点。 服务发现技术的工作：在这种动态环境下，必须要有一种机制让client能够知道如何访问容器提供的服务。 服务发现会保存容器集群中所有微服务最新的信息，比如Ip、端口，并对外提供API，提供服务查询功能。 etcd、consul和zookeeper是服务发现的典型解决方案。 3.监控 docker ps/top/stats是Docker原生的命令行监控工具。除命令行，Docker还提供stats API,用户可以通过HTTP请求获取容器的状态信息。 sysdig、cAdvisor/Heapster和Weave Scope是其他开源的容器监控方案。 4.数据管理 容器经常会在不同的host之间迁移，如何保证持久化数据也能动态迁移，是Rex-Ray这类数据管理工具提供的能力。 5.日志管理 日志为问题排查和事件管理提供重要依据。 docker logs是Docker原生的日志工具。而logspout对日志提供了路由功能，它可以收集不同容器的日志并转发给其他工具进行后处理。 6.安全性 OpenSCAP是一种容器安全工具，能对容器镜像进行扫描，发现潜在漏洞。 Copyright © Aron.Li 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-07-02 11:08:36 "},"Chapter1/CentOS7部署docker.html":{"url":"Chapter1/CentOS7部署docker.html","title":"第4节：CentOS7部署docker","keywords":"","body":"第4节：CentOS7部署docker Copyright © Aron.Li 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-07-02 11:11:00 "},"Chapter2/容器核心概论.html":{"url":"Chapter2/容器核心概论.html","title":"容器核心概论","keywords":"","body":"容器核心概论 Copyright © Aron.Li 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-07-02 11:11:00 "},"Chapter2/Docker的核心组件.html":{"url":"Chapter2/Docker的核心组件.html","title":"第1节：Docker的核心组件","keywords":"","body":"第1节：Docker的核心组件 Copyright © Aron.Li 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-07-02 11:19:49 "}}